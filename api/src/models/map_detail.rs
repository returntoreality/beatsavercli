/*
 * BeatSaver API
 *
 * WIP  If you want to keep any kind of mirror instead of making 100s of requests instead consider subscribing to the websocket api. wss://ws.beatsaver.com/maps  Messages will be in the style {\"type\": \"MAP_UPDATE\", \"msg\": __MAP_DATA_HERE__}
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MapDetail {
    #[serde(rename = "automapper", skip_serializing_if = "Option::is_none")]
    pub automapper: Option<bool>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<Box<crate::models::Instant>>,
    #[serde(rename = "curator", skip_serializing_if = "Option::is_none")]
    pub curator: Option<String>,
    #[serde(rename = "deletedAt", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<Box<crate::models::Instant>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "lastPublishedAt", skip_serializing_if = "Option::is_none")]
    pub last_published_at: Option<Box<crate::models::Instant>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<crate::models::MapDetailMetadata>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "qualified", skip_serializing_if = "Option::is_none")]
    pub qualified: Option<bool>,
    #[serde(rename = "ranked", skip_serializing_if = "Option::is_none")]
    pub ranked: Option<bool>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<crate::models::MapStats>>,
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<Box<crate::models::Instant>>,
    #[serde(rename = "uploaded", skip_serializing_if = "Option::is_none")]
    pub uploaded: Option<Box<crate::models::Instant>>,
    #[serde(rename = "uploader", skip_serializing_if = "Option::is_none")]
    pub uploader: Option<Box<crate::models::UserDetail>>,
    #[serde(rename = "versions", skip_serializing_if = "Option::is_none")]
    pub versions: Option<Vec<crate::models::MapVersion>>,
}

impl MapDetail {
    pub fn new() -> MapDetail {
        MapDetail {
            automapper: None,
            created_at: None,
            curator: None,
            deleted_at: None,
            description: None,
            id: None,
            last_published_at: None,
            metadata: None,
            name: None,
            qualified: None,
            ranked: None,
            stats: None,
            updated_at: None,
            uploaded: None,
            uploader: None,
            versions: None,
        }
    }
}


